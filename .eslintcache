[{"/Users/raj/Documents/GitHub/olive/src/index.tsx":"1","/Users/raj/Documents/GitHub/olive/src/reportWebVitals.ts":"2","/Users/raj/Documents/GitHub/olive/src/serviceWorkerRegistration.ts":"3","/Users/raj/Documents/GitHub/olive/src/App.tsx":"4","/Users/raj/Documents/GitHub/olive/src/components/Home.tsx":"5","/Users/raj/Documents/GitHub/olive/src/components/PeerContext.tsx":"6","/Users/raj/Documents/GitHub/olive/src/components/utils.ts":"7"},{"size":816,"mtime":1612270115311,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1612167867411,"results":"10","hashOfConfig":"9"},{"size":5256,"mtime":1612167867412,"results":"11","hashOfConfig":"9"},{"size":545,"mtime":1612281185623,"results":"12","hashOfConfig":"9"},{"size":13914,"mtime":1612360479470,"results":"13","hashOfConfig":"9"},{"size":3170,"mtime":1612360173873,"results":"14","hashOfConfig":"9"},{"size":997,"mtime":1612341588900,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ckuiyh",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/raj/Documents/GitHub/olive/src/index.tsx",[],["32","33"],"/Users/raj/Documents/GitHub/olive/src/reportWebVitals.ts",[],"/Users/raj/Documents/GitHub/olive/src/serviceWorkerRegistration.ts",[],"/Users/raj/Documents/GitHub/olive/src/App.tsx",[],"/Users/raj/Documents/GitHub/olive/src/components/Home.tsx",["34","35","36"],"import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { PeerContext } from \"./PeerContext\";\nimport {\n  AnimatePresence,\n  motion,\n  useMotionValue,\n  useTransform,\n} from \"framer-motion\";\nimport \"./css/home.css\";\nimport SendOutlinedIcon from \"@material-ui/icons/SendOutlined\";\nimport SettingsEthernetOutlinedIcon from \"@material-ui/icons/SettingsEthernetOutlined\";\nimport ShareOutlinedIcon from \"@material-ui/icons/ShareOutlined\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport Peer from \"peerjs\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport AssignmentOutlinedIcon from \"@material-ui/icons/AssignmentOutlined\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { copyTextToClipboard } from \"./utils\";\nimport { InputBase } from \"@material-ui/core\";\nimport { ContextProps } from \"./types\";\n\nexport default function Home() {\n  const {\n    peer,\n    peerConnection,\n    peerconState,\n    pullPage,\n    setPullPage,\n  } = useContext(PeerContext) as ContextProps;\n\n  const [pullState, setPullState] = useState(0);\n\n  const [shade, setShade] = useState(false);\n\n  const y = useMotionValue(0);\n  const background = useTransform(y, [-100, 0], [\"#0077ff\", \"#161922\"]);\n\n  const runMenu = useCallback(\n    function (ps: number) {\n      switch (ps) {\n        case 0:\n          setPullPage(\"main\");\n          break;\n        case 1:\n          setPullPage(\"connect\");\n          break;\n        case 2:\n          peer && copyTextToClipboard(peer.id);\n          if (navigator.share && peer) {\n            navigator.share({ text: peer.id });\n          }\n          break;\n        case 3:\n          // share\n          setPullPage(\"about\");\n          break;\n        case 4:\n          // share\n          setPullPage(\"messages\");\n          peerConnection?.send({ type: \"event\", event: \"messages\" });\n          break;\n        default:\n        // do something\n      }\n    },\n    [peer, peerConnection, setPullPage]\n  );\n\n  useEffect(() => {\n    if (peerconState) {\n      setPullPage(\"connect\");\n    }\n  }, [peerconState, setPullPage]);\n\n  useEffect(() => {\n    if (!peerconState && pullPage === \"messages\") {\n      runMenu(0);\n    }\n  }, [pullPage, peerconState, runMenu]);\n\n  return (\n    <motion.div\n      style={{\n        background: peerconState && pullPage !== \"messages\" ? background : \"\",\n      }}\n      className=\"home\"\n    >\n      <AnimatePresence>\n        {shade && pullState > 0 ? <Shade {...{ pullState }} /> : \"\"}\n      </AnimatePresence>\n      <motion.header\n        drag={pullPage !== \"messages\" ? \"y\" : false}\n        style={{ y }}\n        onDragStart={() => {\n          if (!peerconState) {\n            setShade(true);\n            setPullState(0);\n          }\n        }}\n        onDragEnd={() => {\n          if (!peerconState) {\n            setShade(false);\n          }\n          runMenu(pullState);\n        }}\n        onDrag={(e, i) => {\n          const y = -i.offset.y;\n          if (peer && !peerconState) {\n            if (y > 250 && y < 400) {\n              setPullState(1);\n            } else if (y >= 400 && y < 500) {\n              setPullState(2);\n            } else if (y >= 500 && y < 550) {\n              setPullState(3);\n            } else if (y <= 250) {\n              setPullState(0);\n            }\n          } else if (peer && peerconState) {\n            if (y >= 400 && y < 500) {\n              setPullState(4);\n            }\n          }\n        }}\n        dragConstraints={{ top: 0, bottom: 0 }}\n      >\n        {peer ? (\n          pullPage === \"main\" ? (\n            <PeerID\n              {...{\n                shade,\n                pullState,\n                peer,\n              }}\n            />\n          ) : pullPage === \"about\" ? (\n            <About />\n          ) : pullPage === \"connect\" ? (\n            <Connect />\n          ) : pullPage === \"messages\" ? (\n            <Messages setPullPage={setPullPage} />\n          ) : (\n            <></>\n          )\n        ) : (\n          <motion.div\n            className=\"connecting-loader\"\n            initial={{\n              opacity: 0,\n              height: 0,\n              y: 0,\n              background: \"#0077ff\",\n            }}\n            animate={{\n              opacity: 1,\n              height: \"auto\",\n              background: \"coral\",\n              y: 0,\n            }}\n            exit={{ opacity: 0, height: 0 }}\n          >\n            <motion.p\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{\n                repeat: Infinity,\n                repeatType: \"reverse\",\n                stiffness: 0.2,\n                damping: 0.5,\n              }}\n            >\n              Assigning ID...\n            </motion.p>\n          </motion.div>\n        )}\n      </motion.header>\n    </motion.div>\n  );\n}\n\nfunction Messages({\n  setPullPage,\n}: {\n  setPullPage: React.Dispatch<React.SetStateAction<string>>;\n}) {\n  return (\n    <motion.div\n      animate={{\n        opacity: 1,\n        height: window.innerHeight,\n        background: \"#161922\",\n      }}\n      className=\"messages\"\n    >\n      <MessageHeader />\n      <MessageContainer setPullPage={setPullPage} />\n      <MessageInput />\n    </motion.div>\n  );\n}\n\nfunction MessageHeader() {\n  const { peerConnection } = useContext(PeerContext) as ContextProps;\n  return (\n    <header>\n      <h2>Olive</h2>\n      <p>Connected to {peerConnection?.peer}</p>\n    </header>\n  );\n}\n\nfunction MessageInput() {\n  const { peerConnection, setMessage } = useContext(\n    PeerContext\n  ) as ContextProps;\n  const [sendBtn, setSendBtn] = useState(false);\n\n  const message = useRef(\"\");\n  const inputfield = useRef<any>();\n\n  function send() {\n    if (sendBtn) {\n      console.log(message.current.trim());\n      const m = { text: message.current.trim() };\n      peerConnection?.send({ message: m, type: \"message\" });\n      setMessage && setMessage((mess: any) => [...mess, { ...m, sent: true }]);\n      inputfield.current?.value && (inputfield.current.value = \"\");\n      inputfield.current?.focus && inputfield.current?.focus();\n    }\n  }\n\n  return (\n    <div className=\"message-input\">\n      <InputBase\n        inputRef={inputfield}\n        fullWidth\n        autoFocus\n        multiline\n        onChange={(e) => {\n          message.current = e.target.value;\n          if (message.current.trim()) {\n            setSendBtn(true);\n          } else {\n            setSendBtn(false);\n          }\n        }}\n        inputProps={{ style: { caretColor: \"#0077ff\", color: \"white\" } }}\n      />\n\n      <SendOutlinedIcon\n        style={{ color: \"#0077ff\", opacity: sendBtn ? 1 : 0.5 }}\n        onClick={send}\n      />\n    </div>\n  );\n}\nfunction MessageContainer({\n  setPullPage,\n}: {\n  setPullPage: React.Dispatch<React.SetStateAction<string>>;\n}) {\n  const { messages, peerConnection, peerconState, setMessage } = useContext(\n    PeerContext\n  ) as ContextProps;\n\n  return (\n    <div className=\"messages-container\">\n      {messages?.map((m, i) => <Message key={i} message={m} />).reverse()}\n    </div>\n  );\n}\n\nfunction Message({ message }: { message: any }) {\n  return (\n    <div className={message.sent ? \"message sent-message\" : \"message\"}>\n      <p>{message.text}</p>\n    </div>\n  );\n}\n\nfunction Connect() {\n  const [clip, setClip] = useState(\"\");\n  const { peer, peerConnection, peerconState, setPeerConnection } = useContext(\n    PeerContext\n  ) as ContextProps;\n  const [otherid, setOtherid] = useState(\"\");\n\n  useEffect(() => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        if (text.length === 5) {\n          setClip(text);\n        }\n      })\n      .catch(() => {});\n  }, []);\n\n  useEffect(() => {\n    if (!(peerConnection && peerconState)) {\n      const interval = setInterval(() => {\n        if (!clip) {\n          navigator.clipboard\n            .readText()\n            .then((text) => {\n              if (text.length === 5) {\n                setClip(text);\n                return true;\n              }\n              return false;\n            })\n            .catch(() => {});\n        }\n      }, 2000);\n\n      return () => clearInterval(interval);\n    }\n  }, [clip, peerConnection, peerconState]);\n\n  function connect(id: string) {\n    console.log(\"connecting to:\", id);\n    const con = peer?.connect(id);\n    console.log(con);\n    setPeerConnection && setPeerConnection(con);\n    const interval = setInterval(() => {\n      console.log(\n        \"checking connetionState\",\n        con?.peerConnection?.connectionState\n      );\n      if (\n        con?.peerConnection?.connectionState &&\n        con?.peerConnection?.connectionState === \"failed\"\n      ) {\n        con.close();\n        setPeerConnection && setPeerConnection(undefined);\n        connect(id);\n        clearInterval(interval);\n      } else if (\n        (con?.peerConnection?.connectionState &&\n          con?.peerConnection?.connectionState === \"connected\") ||\n        !con?.peerConnection?.connectionState\n      ) {\n        clearInterval(interval);\n      }\n    }, 2000);\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{\n        opacity: 1,\n        height: !(peerconState && peerConnection) ? (clip ? 300 : 200) : 200,\n        background: \"#0077ff\",\n      }}\n      className=\"connect-page\"\n    >\n      <header>\n        <h2>\n          {!(peerconState && peerConnection)\n            ? \"Connect to ID\"\n            : `Connected to ${peerConnection.peer}`}\n        </h2>\n        <SettingsEthernetOutlinedIcon />\n      </header>\n      {!(peerconState && peerConnection) ? (\n        <>\n          <TextField\n            id=\"partnerid\"\n            label=\"partner id\"\n            defaultValue=\"\"\n            // fullWidth\n            InputProps={{ style: { caretColor: \"white\", color: \"white\" } }}\n            autoFocus\n            variant=\"outlined\"\n            color=\"secondary\"\n            onChange={(e) => {\n              setOtherid(e.target.value);\n            }}\n          />\n          <Button\n            disabled={!(otherid.length === 5)}\n            variant=\"text\"\n            color=\"secondary\"\n            onClick={() => connect(otherid)}\n          >\n            connect\n          </Button>\n        </>\n      ) : (\n        <></>\n      )}\n      {clip || (peerconState && peerConnection) ? (\n        <div className=\"quick-connect\">\n          <Fab\n            disabled={!!(!peerconState && peerConnection)}\n            onClick={() => {\n              if (peerconState && peerConnection) {\n                peerConnection.close();\n              } else {\n                connect(clip);\n              }\n            }}\n            variant=\"extended\"\n            style={\n              peerconState && peerConnection\n                ? { background: \"coral\", color: \"white\" }\n                : {}\n            }\n          >\n            {peerconState && peerConnection ? (\n              <></>\n            ) : (\n              <AssignmentOutlinedIcon />\n            )}\n            <p>\n              {!peerconState && !peerConnection\n                ? `connect to ${clip}`\n                : !peerconState && peerConnection\n                ? `connecting to ${peerConnection.peer}`\n                : `disconnect from ${peerConnection && peerConnection.peer}`}\n            </p>\n          </Fab>\n        </div>\n      ) : (\n        <></>\n      )}\n    </motion.div>\n  );\n}\nfunction About() {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{\n        opacity: 1,\n        height: 120,\n        background: \"coral\",\n      }}\n      className=\"about\"\n    >\n      <header>\n        <h2>whats this?</h2>\n        <HelpOutlineIcon />\n      </header>\n      <p>\n        just a ux experiment and also u can use this to watch youtube with like\n        one other person\n      </p>\n    </motion.div>\n  );\n}\n\nfunction PeerID({\n  shade,\n  pullState,\n  peer,\n}: {\n  shade: boolean;\n  pullState: number;\n  peer: Peer;\n}) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, height: 0 }}\n      animate={{\n        opacity: 1,\n        height: 200,\n      }}\n      className=\"peer-id\"\n    >\n      <div className=\"pull-up-indicator\">\n        <motion.span\n          initial={{ y: 5 }}\n          animate={{ y: -5 }}\n          transition={{\n            repeat: Infinity,\n            repeatType: \"reverse\",\n            stiffness: 0.2,\n            damping: 0.5,\n          }}\n        >\n          {!shade && pullState === 0 ? \"pull up\" : \"drag to select\"}\n        </motion.span>\n      </div>\n      <h6>you are</h6>\n      <p>{peer?.id}</p>\n    </motion.div>\n  );\n}\n\nfunction Shade({ pullState }: { pullState: number }) {\n  const { peerConnection, peerconState } = useContext(\n    PeerContext\n  ) as ContextProps;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 100 }}\n      exit={{ opacity: 0, y: 200 }}\n      animate={{\n        opacity: 1,\n        y: 0,\n      }}\n      className=\"shade-menu\"\n    >\n      <div\n        style={{ background: pullState === 3 ? \"var(--accent)\" : \"\" }}\n        className=\"menu-item\"\n      >\n        <p>what is this?</p>\n        <HelpOutlineIcon />\n      </div>\n      <div\n        style={{ background: pullState === 2 ? \"var(--accent)\" : \"\" }}\n        className=\"menu-item\"\n      >\n        <p>share id</p>\n        <ShareOutlinedIcon />\n      </div>\n      {!peerConnection ? (\n        <div\n          style={{ background: pullState === 1 ? \"var(--accent)\" : \"\" }}\n          className=\"menu-item\"\n        >\n          <p>connect with</p>\n          <SettingsEthernetOutlinedIcon />\n        </div>\n      ) : (\n        <div\n          style={{ background: peerconState ? \"var(--accent)\" : \"coral\" }}\n          className=\"menu-item\"\n        >\n          <p>\n            {peerconState\n              ? `connected to ${peerConnection.peer}`\n              : `connecting to ${peerConnection.peer}`}\n          </p>\n          <SettingsEthernetOutlinedIcon />\n        </div>\n      )}\n    </motion.div>\n  );\n}\n","/Users/raj/Documents/GitHub/olive/src/components/PeerContext.tsx",[],"/Users/raj/Documents/GitHub/olive/src/components/utils.ts",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":268,"column":21,"nodeType":"43","messageId":"44","endLine":268,"endColumn":35},{"ruleId":"41","severity":1,"message":"45","line":268,"column":37,"nodeType":"43","messageId":"44","endLine":268,"endColumn":49},{"ruleId":"41","severity":1,"message":"46","line":268,"column":51,"nodeType":"43","messageId":"44","endLine":268,"endColumn":61},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"@typescript-eslint/no-unused-vars","'peerConnection' is assigned a value but never used.","Identifier","unusedVar","'peerconState' is assigned a value but never used.","'setMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]